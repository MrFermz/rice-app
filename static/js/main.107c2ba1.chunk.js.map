{"version":3,"sources":["src/login/login.js","src/portal/sidemenu/sidemenu.js","src/portal/admin/admin.js","src/portal/admin/member.js","src/portal/admin/staff.js","src/portal/admin/rice.js","src/portal/admin/payment.js","src/portal/admin/dividend.js","src/portal/admin/rice_price.js","src/portal/staff/staff.js","src/portal/staff/member.js","src/portal/staff/rice.js","src/portal/staff/payment.js","src/portal/staff/dividend.js","src/App.js","serviceWorker.js","index.js"],"names":["login","props","onChange","e","target","name","value","setState","state","username","password","type","storedToken","localStorage","getItem","storedtype","message","this","validAuth","history","push","data","axios","post","config","host","port","path","then","res","result","passtype","setItem","catch","error","Grid","container","direction","justify","alignItems","style","height","Typography","variant","trans","TextField","label","marginTop","width","Select","defaultValue","MenuItem","staff","admin","color","Fab","onClick","onLogin","bind","Component","sidemenu","clear","location","Button","fullWidth","renderUsers","home","member","rice","payment","dividend","rice_price","xs","item","backgroundColor","margin","renderType","marginBottom","startIcon","ExitToApp","onLogout","logout","borderRadius","menu","padding","title","renderCardsMenu","openRegister","openDelete","openUpdate","fname","lname","email","tel","address","Mb_id","getMemberList","get","headers","console","log","today","Date","date","toLocaleDateString","year","month","day","time","getHours","getMinutes","getSeconds","toggleRegister","window","reload","Di_id","dataDividend","Dialog","open","onClose","DialogContent","add","renderRegisterText","multiline","rows","deposit","InputProps","inputProps","min","DialogActions","renderActionBtn","onSave","Save","cancel","Close","toggleDelete","delete_comfirm","delete","onDelete","Done","def","click","icon","Di_num","toggleUpdate","update","renderUpdateText","save","onUpdate","Delete","val","renderRegister","renderDelete","renderUpdate","Add","Autocomplete","options","getOptionLabel","Mb_fname","Mb_lname","onSelectMember","renderInput","params","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","fontWeight","id","TableBody","map","row","i","key","Mb_email","Mb_tel","Mb_address","Mb_date","size","getDividendList","Edit","re_password","age","salary","position","getStaffList","St_id","St_fname","St_lname","onSelectStaff","St_address","St_age","St_salary","St_position","St_date","selfName","currentDate","selected","paddy","sack","paymentNo","SUM","initPayslip","getSelf","getCurrentDate","getPayment","getRicePrice","amount","Intl","NumberFormat","maximumSignificantDigits","format","Ad_user","self_id","Pm_date","Pm_payments","getSum","data2","Rc_kg","Rc_sack","Rc_sum","Rc_date","bills","kg","marginLeft","_rice","baht","sum","onSavePayment","resultStaff","resultAdmin","concat","Pm_id","onSelectPayment","pay_date","_amount","operator","initDividend","dividendCal","Number","toFixed","num","divi_date","money","colSpan","textAlign","monthMatch","ele","Pr_id","_price","Pr_price","price","updateRicePrice","St_user","total","theme","createMuiTheme","typography","App","basename","exact","Login","Admin","adminMember","adminStaff","adminRice","adminPayment","adminDividend","adminRicePrice","Staff","staffMember","staffRice","staffPayment","staffDividend","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.107c2ba1.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport trans from '../../lang/th-th.json'\r\nimport config from '../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Select,\r\n    MenuItem,\r\n    Fab,\r\n    Typography\r\n} from '@material-ui/core'\r\n\r\nexport default class login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            type: 'staff',\r\n            storedToken: localStorage.getItem('token'),\r\n            storedtype: localStorage.getItem('type'),\r\n            message: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, storedtype } = this.state\r\n        if (storedToken !== null && storedtype !== null) {\r\n            this.props.history.push(`/${storedtype}`)\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const { name, value } = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    onLogin() {\r\n        const { username, password, type } = this.state\r\n        const data = { username, password }\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/login_${type}`, data)\r\n            .then(res => {\r\n                const result = res.data\r\n                if (result.result === 'success') {\r\n\r\n                    //save token\r\n                    localStorage.setItem('token', result.data)\r\n                    localStorage.setItem('type', type)\r\n                    localStorage.setItem('username', username)\r\n\r\n                    //show successful\r\n                    let passtype\r\n                    switch (type) {\r\n                        case 'admin':\r\n                            passtype = 'admin'\r\n                            break\r\n                        case 'member':\r\n                            passtype = 'member'\r\n                            break\r\n                        case 'staff':\r\n                            passtype = 'staff'\r\n                            break\r\n                        default:\r\n                            passtype = 'error'\r\n                            break\r\n                    }\r\n                    this.props.history.push(`/${passtype}`)\r\n                } else {\r\n                    this.setState({ message: 'ล็อกอินไม่สำเร็จ' })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({ message: error })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { message } = this.state\r\n        return (\r\n            <Fragment>\r\n                <Grid\r\n                    container\r\n                    direction='column'\r\n                    justify='center'\r\n                    alignItems='center'\r\n                    style={{ height: '100vh' }}>\r\n                    <Typography variant='h3'>\r\n                        {trans.login}\r\n                    </Typography>\r\n                    <TextField\r\n                        name='username'\r\n                        onChange={this.onChange}\r\n                        label={trans.username}\r\n                        style={{ marginTop: '20px', width: '15%' }} />\r\n                    <TextField\r\n                        name='password'\r\n                        type='password'\r\n                        onChange={this.onChange}\r\n                        label={trans.password}\r\n                        style={{ marginTop: '20px', width: '15%' }} />\r\n                    <Select\r\n                        name='type'\r\n                        defaultValue='staff'\r\n                        onChange={this.onChange}\r\n                        style={{ marginTop: '20px', width: '15%' }}>\r\n                        <MenuItem value='staff'>{trans.staff}</MenuItem>\r\n                        <MenuItem value='admin'>{trans.admin}</MenuItem>\r\n                    </Select>\r\n                    <Typography\r\n                        style={{ color: 'red', marginTop: '10px' }}>{message}</Typography>\r\n                    <Fab\r\n                        onClick={this.onLogin.bind(this)}\r\n                        color='primary'\r\n                        style={{ marginTop: '20px' }}>\r\n                        {trans.login}\r\n                    </Fab>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {\r\n    ExitToApp\r\n} from '@material-ui/icons'\r\n\r\nexport default class sidemenu extends Component {\r\n\r\n    onLogout() {\r\n        localStorage.clear('token')\r\n        localStorage.clear('type')\r\n        localStorage.clear('username')\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    renderUsers(location, label) {\r\n        return (\r\n            <Fragment>\r\n                <Button\r\n                    fullWidth\r\n                    variant='text'\r\n                    color='default'\r\n                    style={{ height: 75 }}\r\n                    onClick={() => this.props.history.push(location)}>\r\n                    <Typography>\r\n                        {label}\r\n                    </Typography>\r\n                </Button>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    renderType(type) {\r\n        if (type === 'admin') {\r\n            return (\r\n                <Fragment>\r\n                    {this.renderUsers('admin', trans.home)}\r\n                    {this.renderUsers('adminMember', trans.member)}\r\n                    {this.renderUsers('adminStaff', trans.staff)}\r\n                    {this.renderUsers('adminRice', trans.rice)}\r\n                    {this.renderUsers('adminPayment', trans.payment)}\r\n                    {this.renderUsers('adminDividend', trans.dividend)}\r\n                    {this.renderUsers('adminRicePrice', trans.rice_price)}\r\n                </Fragment>\r\n            )\r\n        } if (type === 'staff') {\r\n            return (\r\n                <Fragment>\r\n                    {this.renderUsers('staff', trans.home)}\r\n                    {this.renderUsers('staffMember', trans.member)}\r\n                    {this.renderUsers('staffRice', trans.rice)}\r\n                    {this.renderUsers('staffPayment', trans.payment)}\r\n                    {this.renderUsers('staffDividend', trans.dividend)}\r\n                </Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const type = this.props.type\r\n        return (\r\n            <Fragment>\r\n                <Grid\r\n                    xs={2}\r\n                    item\r\n                    container\r\n                    direction='column'\r\n                    justify='flex-start'\r\n                    alignItems='center'\r\n                    style={{ backgroundColor: '#EAECEE' }}>\r\n                    <Grid\r\n                        container\r\n                        style={{ height: '100vh' }}>\r\n                        <Grid\r\n                            container\r\n                            direction='column'\r\n                            justify='flex-start'\r\n                            alignItems='center'>\r\n                            <Typography\r\n                                variant='h4'\r\n                                style={{ margin: '10px 0px 10px 0px' }}>\r\n                                {this.props.name}\r\n                            </Typography>\r\n                            {this.renderType(type)}\r\n                        </Grid>\r\n                        <Grid\r\n                            container\r\n                            direction='column'\r\n                            justify='flex-end'\r\n                            alignItems='center'\r\n                            style={{ marginBottom: '20px' }}>\r\n                            <Button\r\n                                fullWidth\r\n                                variant='text'\r\n                                color='secondary'\r\n                                startIcon={<ExitToApp />}\r\n                                style={{ height: 75 }}\r\n                                onClick={this.onLogout.bind(this)}>\r\n                                <Typography>\r\n                                    {trans.logout}\r\n                                </Typography>\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport {\r\n    Grid,\r\n    Typography,\r\n    Button\r\n} from '@material-ui/core'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class admin extends Component {\r\n\r\n    renderCardsMenu(name, location, color) {\r\n        return (\r\n            <Button\r\n                variant='contained'\r\n                onClick={() => this.props.history.push(location)}\r\n                style={{ margin: 15, width: 200, height: 200, backgroundColor: color, borderRadius: 30 }}>\r\n                <Typography>{name}</Typography>\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.admin}\r\n                        type='admin'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Typography>\r\n                            {this.renderCardsMenu(trans.member, 'adminMember', '#ABEBC6')}\r\n                            {this.renderCardsMenu(trans.staff, 'adminStaff', '#A3E4D7')}\r\n                            {this.renderCardsMenu(trans.rice, 'adminRice', '#AED6F1')}\r\n                            {this.renderCardsMenu(trans.payment, 'adminPayment', '#D2B4DE')}\r\n                            {this.renderCardsMenu(trans.dividend, 'adminDividend', '#F5B7B1')}\r\n                            {this.renderCardsMenu(trans.rice_price, 'adminRicePrice', '#D0FF94')}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport config from '../../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Fab,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    Typography,\r\n    TextField\r\n} from '@material-ui/core'\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport {\r\n    Add as AddIcon,\r\n    Close as CloseIcon,\r\n    Save,\r\n    Delete,\r\n    Done,\r\n    Edit\r\n} from '@material-ui/icons'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class member extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            storedToken: localStorage.getItem('token'),\r\n            type: localStorage.getItem('type'),\r\n            result: [],\r\n            openRegister: false,\r\n            openDelete: false,\r\n            openUpdate: false,\r\n            fname: '',\r\n            lname: '',\r\n            email: '',\r\n            tel: '',\r\n            address: '',\r\n            Mb_id: '',\r\n            dividend: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, type } = this.state\r\n        if (storedToken !== null && type === 'admin') {\r\n            this.getMemberList()\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    getMemberList() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/member_list`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            this.setState({ result })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    // TOGGLE FUNCTION\r\n    toggleRegister() {\r\n        this.setState({ openRegister: !this.state.openRegister })\r\n    }\r\n\r\n    toggleDelete() {\r\n        this.setState({ openDelete: !this.state.openDelete })\r\n    }\r\n\r\n    toggleUpdate() {\r\n        this.setState({ openUpdate: !this.state.openUpdate })\r\n\r\n    }\r\n\r\n    // SET STATE\r\n    onChange = (e) => {\r\n        const { name, value } = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    // SAVE MEMBER TO DATABASE\r\n    onSave() {\r\n        const { fname, lname, email, tel, address, dividend } = this.state\r\n        const options = { year: 'numeric', month: 'long', day: 'numeric' }\r\n        const today = new Date()\r\n        let date = today.toLocaleDateString('th-th', options)\r\n        let time = `${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`\r\n        date = `${date} ${time}`\r\n        const data = { fname, lname, email, tel, address, date, dividend }\r\n        if (fname && lname && email && tel && address) {\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/register_member`, data)\r\n                .then(res => {\r\n                    const result = res.data\r\n                    if (result.result === 'success') {\r\n                        console.log('Register Success')\r\n                    } else {\r\n                        console.log('Register Failed')\r\n                    }\r\n                    this.toggleRegister()\r\n                    window.location.reload()\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n    }\r\n\r\n    // DELETE MEMBER FROM DATABASE\r\n    onDelete(Mb_id, Di_id) {\r\n        let dataDividend = { Di_id }\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/delete_dividend`, dataDividend).then(res => {\r\n            const result = res.data\r\n            if (result.result === 'success') {\r\n                console.log('Delete Success')\r\n                window.location.reload()\r\n            } else {\r\n                console.log('Delete Failed')\r\n            }\r\n        }).then(() => {\r\n            const data = { Mb_id }\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/delete_member`, data).then(res => {\r\n                const result = res.data\r\n                if (result.result === 'success') {\r\n                    console.log('Delete Success')\r\n                } else {\r\n                    console.log('Delete Failed')\r\n                }\r\n            })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    // UPDATE MEMBER DATA AND SAVE TO DATABASE\r\n    onUpdate(Mb_id) {\r\n        const { fname, lname, email, tel, address, dividend, Di_id } = this.state\r\n        const data = { Mb_id, fname, lname, email, tel, address }\r\n        if (fname && lname && email && tel && address) {\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/update_member`, data).then(res => {\r\n                const result = res.data\r\n                if (result.result === 'success') {\r\n                    console.log('Update Success')\r\n                } else {\r\n                    console.log('Update Failed')\r\n                }\r\n            }).then(() => {\r\n                let dataDividend = { Di_id, dividend }\r\n                axios.post(`http://${config.host}:${config.port}/${config.path}/update_dividend`, dataDividend).then(res => {\r\n                    const result = res.data\r\n                    if (result.result === 'success') {\r\n                        console.log('Update Success')\r\n                        window.location.reload()\r\n                    } else {\r\n                        console.log('Update Failed')\r\n                    }\r\n                })\r\n            }).catch(error => [\r\n                console.log(error)\r\n            ])\r\n        }\r\n    }\r\n\r\n    // RENDER REGISTER TEXT\r\n    renderRegisterText(name, label) {\r\n        return (\r\n            <TextField\r\n                name={name}\r\n                onChange={this.onChange}\r\n                style={{ width: '45%' }}\r\n                label={label} />\r\n        )\r\n    }\r\n\r\n    // POPUP REGISTER WINDOW\r\n    renderRegister() {\r\n        const { openRegister } = this.state\r\n        return (\r\n            <Dialog\r\n                fullWidth\r\n                open={openRegister}\r\n                onClose={this.toggleRegister.bind(this)}>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {trans.add}{trans.member}\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogContent>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderRegisterText('fname', trans.fname)}\r\n                        {this.renderRegisterText('lname', trans.lname)}\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderRegisterText('email', trans.email)}\r\n                        {this.renderRegisterText('tel', trans.tel)}\r\n                    </Grid>\r\n                    <TextField\r\n                        fullWidth\r\n                        name='address'\r\n                        onChange={this.onChange}\r\n                        style={{ marginBottom: '15px' }}\r\n                        multiline\r\n                        rows='5'\r\n                        label={trans.address} />\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        <TextField\r\n                            label={`${trans.deposit}`}\r\n                            style={{ marginTop: 20, width: 300 }}\r\n                            type='number'\r\n                            variant='outlined'\r\n                            name='dividend'\r\n                            onChange={this.onChange}\r\n                            InputProps={{ inputProps: { min: 0 } }} />\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        alignItems='center'\r\n                        justify='space-evenly'>\r\n                        {this.renderActionBtn('primary', trans.add, this.onSave.bind(this), <Save />)}\r\n                        {this.renderActionBtn('default', trans.cancel, this.toggleRegister.bind(this), <CloseIcon />)}\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    // POPUP DELETE COMFIRM WINDOW\r\n    renderDelete() {\r\n        const { openDelete, Mb_id, Di_id } = this.state\r\n        return (\r\n            <Dialog\r\n                fullWidth\r\n                open={openDelete}\r\n                onClose={this.toggleDelete.bind(this)}>\r\n                <DialogContent>\r\n                    <Typography\r\n                        style={{ width: '300px', height: '150px' }}>\r\n                        {trans.delete_comfirm} ?\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        alignItems='center'\r\n                        justify='space-evenly'>\r\n                        {this.renderActionBtn('secondary', trans.delete, () => this.onDelete(Mb_id, Di_id), <Done />)}\r\n                        {this.renderActionBtn('default', trans.cancel, () => this.toggleDelete(), <CloseIcon />)}\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    // RENDER UPDATE TEXT\r\n    renderUpdateText(name, def, label) {\r\n        return (\r\n            <TextField\r\n                name={name}\r\n                defaultValue={def}\r\n                onChange={this.onChange}\r\n                style={{ width: '45%' }}\r\n                label={label} />\r\n        )\r\n    }\r\n\r\n    // RENDER ACTION BUTTON\r\n    renderActionBtn(color, label, click, icon) {\r\n        return (\r\n            <Fab\r\n                variant='extended'\r\n                onClick={click}\r\n                color={color}>\r\n                {icon}\r\n                <Typography>{label}</Typography>\r\n            </Fab>\r\n        )\r\n    }\r\n\r\n\r\n    // GET DIVIDEND\r\n    getDividendList(Di_id) {\r\n        const data = { Di_id }\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/dividend_list`, data).then(res => {\r\n            const result = res.data\r\n            this.setState({ dividend: result[0].Di_num })\r\n        }).then(() => {\r\n            this.toggleUpdate();\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n\r\n    // POPUP UPDATE WINDOW\r\n    renderUpdate() {\r\n        const { openUpdate, Mb_id, fname, lname, email, tel, address, dividend } = this.state\r\n        return (\r\n            <Dialog\r\n                fullWidth\r\n                open={openUpdate}\r\n                onClose={this.toggleUpdate.bind(this)}>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {trans.update}\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogContent>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderUpdateText('fname', fname, trans.fname)}\r\n                        {this.renderUpdateText('lname', lname, trans.lname)}\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderUpdateText('email', email, trans.email)}\r\n                        {this.renderUpdateText('tel', tel, trans.tel)}\r\n                    </Grid>\r\n                    <TextField\r\n                        fullWidth\r\n                        name='address'\r\n                        defaultValue={address}\r\n                        onChange={this.onChange}\r\n                        style={{ marginBottom: '15px' }}\r\n                        multiline\r\n                        rows='5'\r\n                        label={trans.address} />\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        <TextField\r\n                            label={`${trans.deposit}`}\r\n                            style={{ marginTop: 20, width: 300 }}\r\n                            type='number'\r\n                            variant='outlined'\r\n                            name='dividend'\r\n                            defaultValue={dividend}\r\n                            onChange={this.onChange}\r\n                            InputProps={{ inputProps: { min: 0 } }} />\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        alignItems='center'\r\n                        justify='space-evenly'>\r\n                        {this.renderActionBtn('primary', trans.save, () => this.onUpdate(Mb_id), <Save />)}\r\n                        {this.renderActionBtn('secondary', trans.delete, () => this.toggleDelete(), <Delete />)}\r\n                        {this.renderActionBtn('default', trans.cancel, this.toggleUpdate.bind(this), <CloseIcon />)}\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    // MEMBER SEARCH\r\n    onSelectMember(val) {\r\n        let data = [val]\r\n        if (val) {\r\n            this.setState({ result: data })\r\n        } else {\r\n            this.getMemberList()\r\n            // this.setState({ result })\r\n        }\r\n    }\r\n\r\n    // MAIN WINDOW\r\n    render() {\r\n        const { result } = this.state\r\n        return (\r\n            <Fragment>\r\n                {this.renderRegister()}\r\n                {this.renderDelete()}\r\n                {this.renderUpdate()}\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.admin}\r\n                        type='admin'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Grid\r\n                            container\r\n                            justify='flex-end'\r\n                            direction='row'>\r\n                            <Fab\r\n                                variant='extended'\r\n                                color='primary'\r\n                                onClick={this.toggleRegister.bind(this)}>\r\n                                <AddIcon />\r\n                                <Typography>{trans.add}</Typography>\r\n                            </Fab>\r\n                        </Grid>\r\n                        <Grid\r\n                            container\r\n                            direction='row'\r\n                            style={{ width: '100%' }}>\r\n                            <Autocomplete\r\n                                options={result}\r\n                                getOptionLabel={val => `#${val.Mb_id} ${val.Mb_fname} ${val.Mb_lname}`}\r\n                                style={{ marginTop: 20 }}\r\n                                onChange={(e, val) => {\r\n                                    this.onSelectMember(val)\r\n                                }}\r\n                                renderInput={params => (\r\n                                    <TextField {...params}\r\n                                        label={trans.member}\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: 400 }} />\r\n                                )} />\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.id}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.name}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.email}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.tel}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.address}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.date}</TableCell>\r\n                                            <TableCell></TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {result.map((row, i) => (\r\n                                            <TableRow key={i} style={{ backgroundColor: i % 2 === 0 ? '#F8F9F9' : '' }}>\r\n                                                <TableCell>{i + 1}</TableCell>\r\n                                                <TableCell>{row.Mb_fname} {row.Mb_lname}</TableCell>\r\n                                                <TableCell>{row.Mb_email}</TableCell>\r\n                                                <TableCell>{row.Mb_tel}</TableCell>\r\n                                                <TableCell>{row.Mb_address}</TableCell>\r\n                                                <TableCell>{row.Mb_date}</TableCell>\r\n                                                <TableCell>\r\n                                                    <Grid\r\n                                                        container\r\n                                                        direction='row'\r\n                                                        justify='space-evenly'\r\n                                                        alignItems='center'>\r\n                                                        <Fab\r\n                                                            size='small'\r\n                                                            onClick={() => {\r\n                                                                this.setState({\r\n                                                                    Mb_id: row.Mb_id,\r\n                                                                    fname: row.Mb_fname,\r\n                                                                    lname: row.Mb_lname,\r\n                                                                    email: row.Mb_email,\r\n                                                                    tel: row.Mb_tel,\r\n                                                                    address: row.Mb_address,\r\n                                                                    Di_id: row.Di_id\r\n                                                                });\r\n                                                                this.getDividendList(row.Di_id);\r\n                                                            }}\r\n                                                            color='default'>\r\n                                                            <Edit />\r\n                                                        </Fab>\r\n                                                    </Grid>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport config from '../../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Fab,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    Typography,\r\n    TextField,\r\n} from '@material-ui/core'\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport {\r\n    Add as AddIcon,\r\n    Close as CloseIcon,\r\n    Save,\r\n    Delete,\r\n    Done,\r\n    Edit\r\n} from '@material-ui/icons'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class staff extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            storedToken: localStorage.getItem('token'),\r\n            type: localStorage.getItem('type'),\r\n            result: [],\r\n            openRegister: false,\r\n            openDelete: false,\r\n            openUpdate: false,\r\n            username: '',\r\n            password: '',\r\n            re_password: '',\r\n            fname: '',\r\n            lname: '',\r\n            address: '',\r\n            age: '',\r\n            salary: '',\r\n            position: '',\r\n            Mb_id: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    getStaffList() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/staff_list`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            this.setState({ result })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, type } = this.state\r\n        if (storedToken !== null && type === 'admin') {\r\n            this.getStaffList()\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    toggleRegister() {\r\n        this.setState({ openRegister: !this.state.openRegister })\r\n    }\r\n\r\n    toggleDelete() {\r\n        this.setState({ openDelete: !this.state.openDelete })\r\n    }\r\n\r\n    toggleUpdate() {\r\n        this.setState({ openUpdate: !this.state.openUpdate })\r\n\r\n    }\r\n\r\n    onSave() {\r\n        const { username, password, re_password, fname, lname, address, age, salary, position } = this.state\r\n        const options = { year: 'numeric', month: 'long', day: 'numeric' }\r\n        const today = new Date()\r\n        let date = today.toLocaleDateString('th-th', options)\r\n        let time = `${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`\r\n        date = `${date} ${time}`\r\n        const data = { username, password, fname, lname, address, age, salary, position, date }\r\n        if (username && (password === re_password) && fname && lname && address && age && salary && position) {\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/register_staff`, data)\r\n                .then(res => {\r\n                    const result = res.data\r\n                    if (result.result === 'success') {\r\n                        console.log('Register Success')\r\n                    } else {\r\n                        console.log('Register Failed')\r\n                    }\r\n                    this.toggleRegister()\r\n                    window.location.reload()\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const { name, value } = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    onDelete(St_id) {\r\n        const data = { St_id }\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/delete_staff`, data)\r\n            .then(res => {\r\n                const result = res.data\r\n                if (result.result === 'success') {\r\n                    console.log('Delete Success')\r\n                    window.location.reload()\r\n                } else {\r\n                    console.log('Delete Failed')\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    onUpdate(St_id) {\r\n        const { fname, lname, address, age, salary, position } = this.state\r\n        const data = { St_id, fname, lname, address, age, salary, position }\r\n        if (fname && lname && address && age && salary && position) {\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/update_staff`, data)\r\n                .then(res => {\r\n                    const result = res.data\r\n                    if (result.result === 'success') {\r\n                        console.log('Update Success')\r\n                        window.location.reload()\r\n                    } else {\r\n                        console.log('Update Failed')\r\n                    }\r\n                })\r\n                .catch(error => [\r\n                    console.log(error)\r\n                ])\r\n        }\r\n    }\r\n\r\n    // RENDER REGISTER TEXT\r\n    renderRegisterText(name, label) {\r\n        return (\r\n            <TextField\r\n                name={name}\r\n                onChange={this.onChange}\r\n                style={{ width: '45%' }}\r\n                label={label} />\r\n        )\r\n    }\r\n\r\n    // POPUP REGISTER WINDOW\r\n    renderRegister() {\r\n        const { openRegister } = this.state\r\n        return (\r\n            <Dialog\r\n                fullWidth\r\n                open={openRegister}\r\n                onClose={this.toggleRegister.bind(this)}>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {trans.add}{trans.staff}\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogContent>\r\n                    <TextField\r\n                        fullWidth\r\n                        name='username'\r\n                        onChange={this.onChange}\r\n                        style={{ marginBottom: '15px' }}\r\n                        label={trans.username} />\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        <TextField\r\n                            name='password'\r\n                            type='password'\r\n                            onChange={this.onChange}\r\n                            style={{ width: '45%' }}\r\n                            label={trans.password} />\r\n                        <TextField\r\n                            name='re_password'\r\n                            type='password'\r\n                            onChange={this.onChange}\r\n                            style={{ width: '45%' }}\r\n                            label={trans.re_password} />\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderRegisterText('fname', trans.fname)}\r\n                        {this.renderRegisterText('lname', trans.lname)}\r\n                    </Grid>\r\n                    <TextField\r\n                        fullWidth\r\n                        name='address'\r\n                        onChange={this.onChange}\r\n                        style={{ marginBottom: '15px' }}\r\n                        multiline\r\n                        rows='5'\r\n                        label={trans.address} />\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderRegisterText('age', trans.age)}\r\n                        {this.renderRegisterText('salary', trans.salary)}\r\n                    </Grid>\r\n                    <TextField\r\n                        fullWidth\r\n                        name='position'\r\n                        onChange={this.onChange}\r\n                        style={{ marginBottom: '15px' }}\r\n                        label={trans.position} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        alignItems='center'\r\n                        justify='space-evenly'>\r\n                        {this.renderActionBtn('primary', trans.add, this.onSave.bind(this), <Save />)}\r\n                        {this.renderActionBtn('default', trans.cancel, this.toggleRegister.bind(this), <CloseIcon />)}\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    // POPUP DELETE COMFIRM WINDOW\r\n    renderDelete() {\r\n        const { openDelete, St_id } = this.state\r\n        return (\r\n            <Dialog\r\n                fullWidth\r\n                open={openDelete}\r\n                onClose={this.toggleDelete.bind(this)}>\r\n                <DialogContent>\r\n                    <Typography\r\n                        style={{ width: '300px', height: '150px' }}>\r\n                        {trans.delete_comfirm} ?\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        alignItems='center'\r\n                        justify='space-evenly'>\r\n                        {this.renderActionBtn('secondary', trans.delete, () => this.onDelete(St_id), <Done />)}\r\n                        {this.renderActionBtn('default', trans.cancel, () => this.toggleDelete(), <CloseIcon />)}\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    // RENDER UPDATE TEXT\r\n    renderUpdateText(name, def, label) {\r\n        return (\r\n            <TextField\r\n                name={name}\r\n                defaultValue={def}\r\n                onChange={this.onChange}\r\n                style={{ width: '45%' }}\r\n                label={label} />\r\n        )\r\n    }\r\n\r\n    // RENDER ACTION BUTTON\r\n    renderActionBtn(color, label, click, icon) {\r\n        return (\r\n            <Fab\r\n                variant='extended'\r\n                onClick={click}\r\n                color={color}>\r\n                {icon}\r\n                <Typography>{label}</Typography>\r\n            </Fab>\r\n        )\r\n    }\r\n\r\n    // POPUP UPDATE WINDOW\r\n    renderUpdate() {\r\n        const { openUpdate, St_id, fname, lname, address, age, salary, position } = this.state\r\n        return (\r\n            <Dialog\r\n                fullWidth\r\n                open={openUpdate}\r\n                onClose={this.toggleUpdate.bind(this)}>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {trans.update}\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogContent>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderUpdateText('fname', fname, trans.fname)}\r\n                        {this.renderUpdateText('lname', lname, trans.lname)}\r\n                    </Grid>\r\n                    <TextField\r\n                        fullWidth\r\n                        name='address'\r\n                        defaultValue={address}\r\n                        onChange={this.onChange}\r\n                        style={{ marginBottom: '15px' }}\r\n                        multiline\r\n                        rows='5'\r\n                        label={trans.address} />\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderUpdateText('age', age, trans.age)}\r\n                        {this.renderUpdateText('salary', salary, trans.salary)}\r\n                    </Grid>\r\n                    <TextField\r\n                        fullWidth\r\n                        name='position'\r\n                        defaultValue={position}\r\n                        onChange={this.onChange}\r\n                        style={{ marginBottom: '15px' }}\r\n                        label={trans.position} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        alignItems='center'\r\n                        justify='space-evenly'>\r\n                        {this.renderActionBtn('primary', trans.save, () => this.onUpdate(St_id), <Save />)}\r\n                        {this.renderActionBtn('secondary', trans.delete, () => this.toggleDelete(), <Delete />)}\r\n                        {this.renderActionBtn('default', trans.cancel, this.toggleUpdate.bind(this), <CloseIcon />)}\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    // STAFF SEARCH\r\n    onSelectStaff(val) {\r\n        let data = [val]\r\n        if (val) {\r\n            this.setState({ result: data })\r\n        } else {\r\n            this.getStaffList()\r\n            // this.setState({ result })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { result } = this.state\r\n        return (\r\n            <Fragment>\r\n                {this.renderRegister()}\r\n                {this.renderDelete()}\r\n                {this.renderUpdate()}\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.admin}\r\n                        type='admin'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Grid\r\n                            container\r\n                            justify='flex-end'\r\n                            direction='row'>\r\n                            <Fab\r\n                                variant='extended'\r\n                                color='primary'\r\n                                onClick={this.toggleRegister.bind(this)}>\r\n                                <AddIcon />\r\n                                <Typography>{trans.add}</Typography>\r\n                            </Fab>\r\n                        </Grid>\r\n                        <Grid\r\n                            container\r\n                            direction='row'\r\n                            style={{ width: '100%' }}>\r\n                            <Autocomplete\r\n                                options={result}\r\n                                getOptionLabel={val => `#${val.St_id} ${val.St_fname} ${val.St_lname}`}\r\n                                style={{ marginTop: 20 }}\r\n                                onChange={(e, val) => {\r\n                                    this.onSelectStaff(val)\r\n                                }}\r\n                                renderInput={params => (\r\n                                    <TextField {...params}\r\n                                        label={trans.staff}\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: 400 }} />\r\n                                )} />\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.id}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.name}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.address}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.age}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.salary}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.position}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.date}</TableCell>\r\n                                            <TableCell></TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {result.map((row, i) => (\r\n                                            <TableRow key={i} style={{ backgroundColor: i % 2 === 0 ? '#F8F9F9' : '' }}>\r\n                                                <TableCell>{i + 1}</TableCell>\r\n                                                <TableCell>{row.St_fname} {row.St_lname}</TableCell>\r\n                                                <TableCell>{row.St_address}</TableCell>\r\n                                                <TableCell>{row.St_age}</TableCell>\r\n                                                <TableCell>{row.St_salary}</TableCell>\r\n                                                <TableCell>{row.St_position}</TableCell>\r\n                                                <TableCell>{row.St_date}</TableCell>\r\n                                                <TableCell>\r\n                                                    <Grid\r\n                                                        container\r\n                                                        direction='row'\r\n                                                        justify='space-evenly'\r\n                                                        alignItems='center'>\r\n                                                        <Fab\r\n                                                            size='small'\r\n                                                            onClick={() => {\r\n                                                                this.toggleUpdate(); this.setState({\r\n                                                                    St_id: row.St_id,\r\n                                                                    fname: row.St_fname,\r\n                                                                    lname: row.St_lname,\r\n                                                                    address: row.St_address,\r\n                                                                    age: row.St_age,\r\n                                                                    salary: row.St_salary,\r\n                                                                    position: row.St_position\r\n                                                                })\r\n                                                            }}\r\n                                                            color='default'>\r\n                                                            <Edit />\r\n                                                        </Fab>\r\n                                                    </Grid>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport config from '../../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    Typography,\r\n    TextField,\r\n    Fab\r\n} from '@material-ui/core'\r\nimport {\r\n    Save\r\n} from '@material-ui/icons'\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class rice extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            storedToken: localStorage.getItem('token'),\r\n            type: localStorage.getItem('type'),\r\n            selfName: localStorage.getItem('username'),\r\n            currentDate: '',\r\n            result: [],\r\n            selected: {},\r\n            paddy: 0,\r\n            rice: 0,\r\n            sack: 0,\r\n            paymentNo: 0,\r\n            SUM: 0,\r\n            Mb_id: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, type } = this.state\r\n        if (storedToken !== null && type === 'admin') {\r\n            this.initPayslip()\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const { name, value } = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    initPayslip() {\r\n        this.getSelf()\r\n        this.getCurrentDate()\r\n        this.getMemberList()\r\n        this.getPayment()\r\n        this.getRicePrice()\r\n    }\r\n\r\n    onSelectMember(val) {\r\n        if (val) {\r\n            this.setState({ Mb_id: val.Mb_id })\r\n        } else {\r\n            this.setState({ Mb_id: null })\r\n        }\r\n    }\r\n\r\n    getCurrentDate() {\r\n        const options = { year: 'numeric', month: 'long', day: 'numeric' }\r\n        const today = new Date()\r\n        let date = today.toLocaleDateString('th-th', options)\r\n        this.setState({ currentDate: date })\r\n    }\r\n\r\n    getMemberList() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/member_list`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            this.setState({ result })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    getPayment() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/payment_id`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            let paymentNo = result[0]['MAX(Pm_id)'] + 1\r\n            this.setState({ paymentNo })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    getRicePrice() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/rice_price`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            let rice_price = result[0]['Pr_price']\r\n            this.setState({ rice_price })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    getSum(amount, rice_price) {\r\n        let SUM = new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(amount * rice_price)\r\n        return SUM\r\n    }\r\n\r\n    getSelf() {\r\n        const { selfName } = this.state\r\n        let data = { Ad_user: selfName }\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/self_Ad_id`, data)\r\n            .then(res => {\r\n                const result = res.data\r\n                let self_id = result[0]['Ad_id']\r\n                this.setState({ self_id })\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    onSavePayment(currentDate, Mb_id, self_id, sack, paddy, rice, rice_price) {\r\n        const { type } = this.state\r\n        let data = {\r\n            Pm_date: currentDate,\r\n            Mb_id,\r\n            St_id: self_id,\r\n            Pm_payments: this.getSum(rice, rice_price),\r\n            type\r\n        }\r\n        let data2 = {\r\n            St_id: self_id,\r\n            Rc_kg: rice,\r\n            Rc_sack: paddy,\r\n            Rc_sum: this.getSum(rice, rice_price),\r\n            Rc_date: currentDate,\r\n            type\r\n        }\r\n        if (currentDate && Mb_id && self_id && rice && paddy && sack && type) {\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/payment_save`, data)\r\n                .then(res => {\r\n                    const result = res.data\r\n                    if (result.result === 'success') {\r\n                        console.log('Save Success')\r\n                    } else {\r\n                        console.log('Save Failed')\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/rice_save`, data2)\r\n                .then(res => {\r\n                    const result = res.data\r\n                    if (result.result === 'success') {\r\n                        console.log('Save Success')\r\n                    } else {\r\n                        console.log('Save Failed')\r\n                    }\r\n                    window.location.reload()\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { currentDate, result, paddy, rice, sack, paymentNo, rice_price, Mb_id, self_id } = this.state\r\n        return (\r\n            < Fragment >\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.admin}\r\n                        type='admin'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Typography variant='h4'>{`${trans.bills}: ${paymentNo}`}</Typography>\r\n                        <Typography variant='h4' style={{ marginTop: 20 }}>{currentDate}</Typography>\r\n                        <Autocomplete\r\n                            options={result}\r\n                            getOptionLabel={val => `#${val.Mb_id} ${val.Mb_fname} ${val.Mb_lname}`}\r\n                            style={{ width: 620, marginTop: 20 }}\r\n                            onChange={(e, val) => {\r\n                                this.onSelectMember(val)\r\n                            }}\r\n                            renderInput={params => (\r\n                                <TextField {...params}\r\n                                    label={trans.member}\r\n                                    variant=\"outlined\"\r\n                                    style={{ width: 620 }} />\r\n                            )} />\r\n                        <Grid>\r\n                            <TextField\r\n                                label={trans.amount + trans.sack}\r\n                                style={{ marginTop: 20, width: 300 }}\r\n                                type='number'\r\n                                variant='outlined'\r\n                                name='sack'\r\n                                onChange={this.onChange}\r\n                                InputProps={{ inputProps: { min: 0 } }} />\r\n                            <TextField\r\n                                label={`${trans.kg} (${trans.paddy})`}\r\n                                style={{ marginLeft: 20, marginTop: 20, width: 300 }}\r\n                                type='number'\r\n                                variant='outlined'\r\n                                name='paddy'\r\n                                onChange={this.onChange}\r\n                                InputProps={{ inputProps: { min: 0 } }} />\r\n                            <TextField\r\n                                label={`${trans.kg} (${trans._rice})`}\r\n                                style={{ marginLeft: 20, marginTop: 20, width: 300 }}\r\n                                type='number'\r\n                                variant='outlined'\r\n                                name='rice'\r\n                                onChange={this.onChange}\r\n                                InputProps={{ inputProps: { min: 0 } }} />\r\n                        </Grid>\r\n                        <Typography variant='h4' style={{ marginTop: 20 }}>{\r\n                            trans.rice_price} ({trans.kg}): {rice_price} {trans.baht}</Typography>\r\n                        <Typography variant='h4' style={{ marginTop: 20 }}>{\r\n                            trans.sum}:  {this.getSum(rice, rice_price)} {trans.baht}</Typography>\r\n                        <Fab\r\n                            style={{ marginTop: 20 }}\r\n                            size='small'\r\n                            onClick={() => {\r\n                                this.onSavePayment(currentDate, Mb_id, self_id, sack, rice, paddy, rice_price)\r\n                            }}\r\n                            color='default'>\r\n                            <Save />\r\n                        </Fab>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment >\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport config from '../../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class payment extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            storedToken: localStorage.getItem('token'),\r\n            type: localStorage.getItem('type'),\r\n            selfName: localStorage.getItem('username'),\r\n            result: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, type } = this.state\r\n        if (storedToken !== null && type === 'admin') {\r\n            this.getPayment()\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    getPayment() {\r\n        const { storedToken } = this.state\r\n        let resultStaff = [], resultAdmin = []\r\n        let result = []\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/getPaymentStaff`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            resultStaff = res.data\r\n\r\n            axios.get(`http://${config.host}:${config.port}/${config.path}/getPaymentAdmin`, {\r\n                headers: { 'x-access-token': storedToken }\r\n            }).then(res => {\r\n                resultAdmin = res.data\r\n\r\n                result = resultStaff.concat(resultAdmin)\r\n                this.setState({ result })\r\n            })\r\n        })\r\n    }\r\n\r\n    onSelectPayment(val) {\r\n        let data = [val]\r\n        if (val) {\r\n            this.setState({ result: data })\r\n        } else {\r\n            this.getPayment()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { result } = this.state\r\n        return (\r\n            <Fragment>\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.admin}\r\n                        type='admin'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Autocomplete\r\n                            options={result}\r\n                            getOptionLabel={val => `#${val.Pm_id} เมื่อวันที่ ${val.Pm_date}`}\r\n                            style={{ width: 620, marginTop: 20 }}\r\n                            onChange={(e, val) => {\r\n                                this.onSelectPayment(val)\r\n                            }}\r\n                            renderInput={params => (\r\n                                <TextField {...params}\r\n                                    label='ค้นหาเลขใบเสร็จ'\r\n                                    variant=\"outlined\"\r\n                                    style={{ width: 620 }} />\r\n                            )} />\r\n                        <Grid\r\n                            container\r\n                            direction='row'\r\n                            style={{ width: '100%' }}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>#</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.pay_date}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.member}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans._amount}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.operator}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {result.map((row, i, ) => (\r\n                                            <TableRow key={i} style={{ backgroundColor: i % 2 === 0 ? '#F8F9F9' : '' }}>\r\n                                                <TableCell>{row.Pm_id}</TableCell>\r\n                                                <TableCell>{row.Pm_date}</TableCell>\r\n                                                <TableCell>{row.Mb_fname} {row.Mb_lname}</TableCell>\r\n                                                <TableCell>{row.Pm_payments}</TableCell>\r\n                                                {row.St_id\r\n                                                    ? <TableCell>{row.St_fname} {row.St_lname}</TableCell>\r\n                                                    : <TableCell>{row.Ad_user}</TableCell>}\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport config from '../../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class dividend extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            storedToken: localStorage.getItem('token'),\r\n            type: localStorage.getItem('type'),\r\n            selfName: localStorage.getItem('username'),\r\n            currentDate: '',\r\n            result: [],\r\n            selected: {},\r\n            paddy: 0,\r\n            rice: 0,\r\n            sack: 0,\r\n            paymentNo: 0,\r\n            SUM: 0,\r\n            Mb_id: null,\r\n            Di_id: null,\r\n            dividend: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, type } = this.state\r\n        if (storedToken !== null && type === 'admin') {\r\n            this.initDividend()\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const { name, value } = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    initDividend() {\r\n        this.getMemberList()\r\n    }\r\n\r\n    onSelectMember(val) {\r\n        if (val) {\r\n            this.setState({\r\n                Mb_id: val.Mb_id,\r\n                Di_id: val.Di_id\r\n            })\r\n            this.getDividendList(val.Di_id)\r\n        } else {\r\n            this.setState({ Mb_id: null })\r\n        }\r\n    }\r\n\r\n    getMemberList() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/member_list`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            console.log(result)\r\n            this.setState({ result })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    getDividendList(Di_id) {\r\n        const data = { Di_id }\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/dividend_list`, data)\r\n            .then(res => {\r\n                const result = res.data\r\n                this.dividendCal(result)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    dividendCal(result) {\r\n        let val = result[0].Di_num\r\n        let data = []\r\n        let sum = 0\r\n        for (let i = 12; i > 0; i--) {\r\n            let value = val * 7 / 100 * i / 12\r\n            value = Number(value.toFixed(2))\r\n            sum += value\r\n            data.push({ month: i, value, num: val })\r\n        }\r\n        data[12] = { month: 0, value: '', num: Number(sum.toFixed(2)) }\r\n        this.setState({ dividend: data })\r\n    }\r\n\r\n    monthMatch(month) {\r\n        let months = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']\r\n        return months[month - 1]\r\n    }\r\n\r\n    render() {\r\n        const { result, dividend } = this.state\r\n        return (\r\n            <Fragment>\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.admin}\r\n                        type='admin'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Autocomplete\r\n                            options={result}\r\n                            getOptionLabel={val => `#${val.Mb_id} ${val.Mb_fname} ${val.Mb_lname}`}\r\n                            style={{ width: 620, marginTop: 20 }}\r\n                            onChange={(e, val) => {\r\n                                this.onSelectMember(val)\r\n                            }}\r\n                            renderInput={params => (\r\n                                <TextField {...params}\r\n                                    label={trans.member}\r\n                                    variant=\"outlined\"\r\n                                    style={{ width: 620 }} />\r\n                            )} />\r\n                        <Grid\r\n                            container\r\n                            direction='row'\r\n                            style={{ width: '100%' }}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>#</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.divi_date}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.amount}{trans.money}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.money}{trans.dividend}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {dividend.map((row, i, ) => (\r\n                                            <TableRow key={i} style={{ backgroundColor: i % 2 === 0 ? '#F8F9F9' : '' }}>\r\n                                                {row.month === 0\r\n                                                    ?\r\n                                                    <Fragment>\r\n                                                        <TableCell colSpan={3} style={{ textAlign: 'center', fontWeight: 'bold' }}>รวม</TableCell>\r\n                                                        <TableCell>{row.num}</TableCell>\r\n                                                    </Fragment>\r\n                                                    :\r\n                                                    <Fragment>\r\n                                                        <TableCell>{i + 1}</TableCell>\r\n                                                        <TableCell>{this.monthMatch(row.month)}</TableCell>\r\n                                                        <TableCell>{row.num}</TableCell>\r\n                                                        <TableCell>{row.value}</TableCell>\r\n                                                    </Fragment>\r\n                                                }\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport config from '../../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    Button,\r\n    TextField,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class rice_price extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            storedToken: localStorage.getItem('token'),\r\n            type: localStorage.getItem('type')\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, type } = this.state\r\n        if (storedToken !== null && type === 'admin') {\r\n            this.getRicePrice()\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const { name, value } = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    getRicePrice() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/get_rice_price`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            for (const ele of result) {\r\n                this.setState({ id: ele.Pr_id, _price: ele.Pr_price })\r\n            }\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    updateRicePrice() {\r\n        const { id, price } = this.state\r\n        const data = { id, price }\r\n        console.log(data)\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/set_rice_price`, data).then(res => {\r\n            const result = res.data\r\n            if (result.result === 'success') {\r\n                console.log('Update Success')\r\n                window.location.reload()\r\n            } else {\r\n                console.log('Update Failed')\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { _price } = this.state\r\n        return (\r\n            <Fragment>\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.admin}\r\n                        type='admin'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Typography\r\n                            variant='h6'\r\n                            style={{ marginBottom: 30 }}>\r\n                            ปัจจุบัน กิโลกรัมละ {_price} บาท</Typography>\r\n                        <Grid\r\n                            container\r\n                            direction='row'>\r\n                            <TextField\r\n                                label='ราคาที่ต้องการ'\r\n                                variant='standard'\r\n                                name='price'\r\n                                type='number'\r\n                                onChange={this.onChange}\r\n                                style={{ width: 200 }} />\r\n                            <Button\r\n                                variant='contained'\r\n                                onClick={() => this.updateRicePrice()}\r\n                                style={{ width: 50, height: 55, marginLeft: 30 }}>\r\n                                บันทึก\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport {\r\n    Grid,\r\n    Typography,\r\n    Button\r\n} from '@material-ui/core'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class staff extends Component {\r\n\r\n    renderCardsMenu(name, location, color) {\r\n        return (\r\n            <Button\r\n                variant='contained'\r\n                onClick={() => this.props.history.push(location)}\r\n                style={{ margin: 15, width: 200, height: 200, backgroundColor: color, borderRadius: 30 }}>\r\n                <Typography>{name}</Typography>\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.staff}\r\n                        type='staff'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Typography>\r\n                            {this.renderCardsMenu(trans.member, 'staffMember', '#ABEBC6')}\r\n                            {this.renderCardsMenu(trans.rice, 'staffRice', '#AED6F1')}\r\n                            {this.renderCardsMenu(trans.payment, 'staffPayment', '#D2B4DE')}\r\n                            {this.renderCardsMenu(trans.dividend, 'staffDividend', '#F5B7B1')}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport config from '../../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Fab,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    Typography,\r\n    TextField\r\n} from '@material-ui/core'\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport {\r\n    Add as AddIcon,\r\n    Close as CloseIcon,\r\n    Save,\r\n    Delete,\r\n    Done,\r\n    Edit\r\n} from '@material-ui/icons'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class member extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            storedToken: localStorage.getItem('token'),\r\n            type: localStorage.getItem('type'),\r\n            result: [],\r\n            openRegister: false,\r\n            openDelete: false,\r\n            openUpdate: false,\r\n            fname: '',\r\n            lname: '',\r\n            email: '',\r\n            tel: '',\r\n            address: '',\r\n            Mb_id: '',\r\n            dividend: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, type } = this.state\r\n        if (storedToken !== null && type === 'staff') {\r\n            this.getMemberList()\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    getMemberList() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/member_list`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            this.setState({ result })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    // TOGGLE FUNCTION\r\n    toggleRegister() {\r\n        this.setState({ openRegister: !this.state.openRegister })\r\n    }\r\n\r\n    toggleDelete() {\r\n        this.setState({ openDelete: !this.state.openDelete })\r\n    }\r\n\r\n    toggleUpdate() {\r\n        this.setState({ openUpdate: !this.state.openUpdate })\r\n    }\r\n\r\n    // SET STATE\r\n    onChange = (e) => {\r\n        const { name, value } = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    // SAVE MEMBER TO DATABASE\r\n    onSave() {\r\n        const { fname, lname, email, tel, address, dividend } = this.state\r\n        const options = { year: 'numeric', month: 'long', day: 'numeric' }\r\n        const today = new Date()\r\n        let date = today.toLocaleDateString('th-th', options)\r\n        let time = `${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`\r\n        date = `${date} ${time}`\r\n        const data = { fname, lname, email, tel, address, date, dividend }\r\n        if (fname && lname && email && tel && address) {\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/register_member`, data)\r\n                .then(res => {\r\n                    const result = res.data\r\n                    if (result.result === 'success') {\r\n                        console.log('Register Success')\r\n                    } else {\r\n                        console.log('Register Failed')\r\n                    }\r\n                    this.toggleRegister()\r\n                    window.location.reload()\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n    }\r\n\r\n    // DELETE MEMBER FROM DATABASE\r\n    onDelete(Mb_id, Di_id) {\r\n        let dataDividend = { Di_id }\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/delete_dividend`, dataDividend).then(res => {\r\n            const result = res.data\r\n            if (result.result === 'success') {\r\n                console.log('Delete Success')\r\n                window.location.reload()\r\n            } else {\r\n                console.log('Delete Failed')\r\n            }\r\n        }).then(() => {\r\n            const data = { Mb_id }\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/delete_member`, data).then(res => {\r\n                const result = res.data\r\n                if (result.result === 'success') {\r\n                    console.log('Delete Success')\r\n                } else {\r\n                    console.log('Delete Failed')\r\n                }\r\n            })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    // UPDATE MEMBER DATA AND SAVE TO DATABASE\r\n    onUpdate(Mb_id) {\r\n        const { fname, lname, email, tel, address, dividend, Di_id } = this.state\r\n        const data = { Mb_id, fname, lname, email, tel, address }\r\n        if (fname && lname && email && tel && address) {\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/update_member`, data).then(res => {\r\n                const result = res.data\r\n                if (result.result === 'success') {\r\n                    console.log('Update Success')\r\n                } else {\r\n                    console.log('Update Failed')\r\n                }\r\n            }).then(() => {\r\n                let dataDividend = { Di_id, dividend }\r\n                axios.post(`http://${config.host}:${config.port}/${config.path}/update_dividend`, dataDividend).then(res => {\r\n                    const result = res.data\r\n                    if (result.result === 'success') {\r\n                        console.log('Update Success')\r\n                        window.location.reload()\r\n                    } else {\r\n                        console.log('Update Failed')\r\n                    }\r\n                })\r\n            }).catch(error => [\r\n                console.log(error)\r\n            ])\r\n        }\r\n    }\r\n\r\n    // RENDER REGISTER TEXT\r\n    renderRegisterText(name, label) {\r\n        return (\r\n            <TextField\r\n                name={name}\r\n                onChange={this.onChange}\r\n                style={{ width: '45%' }}\r\n                label={label} />\r\n        )\r\n    }\r\n\r\n    // POPUP REGISTER WINDOW\r\n    renderRegister() {\r\n        const { openRegister } = this.state\r\n        return (\r\n            <Dialog\r\n                fullWidth\r\n                open={openRegister}\r\n                onClose={this.toggleRegister.bind(this)}>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {trans.add}{trans.member}\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogContent>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderRegisterText('fname', trans.fname)}\r\n                        {this.renderRegisterText('lname', trans.lname)}\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderRegisterText('email', trans.email)}\r\n                        {this.renderRegisterText('tel', trans.tel)}\r\n                    </Grid>\r\n                    <TextField\r\n                        fullWidth\r\n                        name='address'\r\n                        onChange={this.onChange}\r\n                        multiline\r\n                        rows='5'\r\n                        label={trans.address} />\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        <TextField\r\n                            label={`${trans.deposit}`}\r\n                            style={{ marginTop: 20, width: 300 }}\r\n                            type='number'\r\n                            variant='outlined'\r\n                            name='dividend'\r\n                            onChange={this.onChange}\r\n                            InputProps={{ inputProps: { min: 0 } }} />\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        alignItems='center'\r\n                        justify='space-evenly'>\r\n                        {this.renderActionBtn('primary', trans.add, this.onSave.bind(this), <Save />)}\r\n                        {this.renderActionBtn('default', trans.cancel, this.toggleRegister.bind(this), <CloseIcon />)}\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    // POPUP DELETE WINDOW\r\n    renderDelete() {\r\n        const { openDelete, Mb_id, Di_id } = this.state\r\n        return (\r\n            <Dialog\r\n                fullWidth\r\n                open={openDelete}\r\n                onClose={this.toggleDelete.bind(this)}>\r\n                <DialogContent>\r\n                    <Typography\r\n                        style={{ width: '300px', height: '150px' }}>\r\n                        {trans.delete_comfirm} ?\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        alignItems='center'\r\n                        justify='space-evenly'>\r\n                        {this.renderActionBtn('secondary', trans.delete, () => this.onDelete(Mb_id, Di_id), <Done />)}\r\n                        {this.renderActionBtn('default', trans.cancel, () => this.toggleDelete(), <CloseIcon />)}\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    // RENDER UPDATE TEXT\r\n    renderUpdateText(name, def, label) {\r\n        return (\r\n            <TextField\r\n                name={name}\r\n                defaultValue={def}\r\n                onChange={this.onChange}\r\n                style={{ width: '45%' }}\r\n                label={label} />\r\n        )\r\n    }\r\n\r\n    // RENDER ACTION BUTTON\r\n    renderActionBtn(color, label, click, icon) {\r\n        return (\r\n            <Fab\r\n                variant='extended'\r\n                onClick={click}\r\n                color={color}>\r\n                {icon}\r\n                <Typography>{label}</Typography>\r\n            </Fab>\r\n        )\r\n    }\r\n\r\n\r\n    // GET DIVIDEND\r\n    getDividendList(Di_id) {\r\n        const data = { Di_id }\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/dividend_list`, data).then(res => {\r\n            const result = res.data\r\n            this.setState({ dividend: result[0].Di_num })\r\n        }).then(() => {\r\n            this.toggleUpdate();\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n\r\n    // POPUP UPDATE WINDOW\r\n    renderUpdate() {\r\n        const { openUpdate, Mb_id, fname, lname, email, tel, address, dividend } = this.state\r\n        return (\r\n            <Dialog\r\n                fullWidth\r\n                open={openUpdate}\r\n                onClose={this.toggleUpdate.bind(this)}>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {trans.update}\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogContent>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderUpdateText('fname', fname, trans.fname)}\r\n                        {this.renderUpdateText('lname', lname, trans.lname)}\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        {this.renderUpdateText('email', email, trans.email)}\r\n                        {this.renderUpdateText('tel', tel, trans.tel)}\r\n                    </Grid>\r\n                    <TextField\r\n                        fullWidth\r\n                        name='address'\r\n                        defaultValue={address}\r\n                        onChange={this.onChange}\r\n                        multiline\r\n                        rows='5'\r\n                        label={trans.address} />\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        justify='space-between'\r\n                        alignItems='center'\r\n                        style={{ marginBottom: '15px' }}>\r\n                        <TextField\r\n                            label={`${trans.deposit}`}\r\n                            style={{ marginTop: 20, width: 300 }}\r\n                            type='number'\r\n                            variant='outlined'\r\n                            name='dividend'\r\n                            defaultValue={dividend}\r\n                            onChange={this.onChange}\r\n                            InputProps={{ inputProps: { min: 0 } }} />\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Grid\r\n                        container\r\n                        direction='row'\r\n                        alignItems='center'\r\n                        justify='space-evenly'>\r\n                        {this.renderActionBtn('primary', trans.save, () => this.onUpdate(Mb_id), <Save />)}\r\n                        {this.renderActionBtn('secondary', trans.delete, () => this.toggleDelete(), <Delete />)}\r\n                        {this.renderActionBtn('default', trans.cancel, this.toggleUpdate.bind(this), <CloseIcon />)}\r\n                    </Grid>\r\n                </DialogActions>\r\n            </Dialog>\r\n        )\r\n    }\r\n\r\n    // MEMBER SEARCH\r\n    onSelectMember(val) {\r\n        let data = [val]\r\n        if (val) {\r\n            this.setState({ result: data })\r\n        } else {\r\n            this.getMemberList()\r\n            // this.setState({ result })\r\n        }\r\n    }\r\n\r\n    // MAIN WINDOW\r\n    render() {\r\n        const { result } = this.state\r\n        return (\r\n            <Fragment>\r\n                {this.renderRegister()}\r\n                {this.renderDelete()}\r\n                {this.renderUpdate()}\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.staff}\r\n                        type='staff'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Grid\r\n                            container\r\n                            justify='flex-end'\r\n                            direction='row'>\r\n                            <Fab\r\n                                variant='extended'\r\n                                color='primary'\r\n                                onClick={this.toggleRegister.bind(this)}>\r\n                                <AddIcon />\r\n                                <Typography>{trans.add}</Typography>\r\n                            </Fab>\r\n                        </Grid>\r\n                        <Grid\r\n                            container\r\n                            direction='row'\r\n                            style={{ width: '100%' }}>\r\n                            <Autocomplete\r\n                                options={result}\r\n                                getOptionLabel={val => `#${val.Mb_id} ${val.Mb_fname} ${val.Mb_lname}`}\r\n                                style={{ marginTop: 20 }}\r\n                                onChange={(e, val) => {\r\n                                    this.onSelectMember(val)\r\n                                }}\r\n                                renderInput={params => (\r\n                                    <TextField {...params}\r\n                                        label={trans.member}\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: 400 }} />\r\n                                )} />\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.id}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.name}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.email}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.tel}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.address}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.date}</TableCell>\r\n                                            <TableCell></TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {result.map((row, i, ) => (\r\n                                            <TableRow key={i} style={{ backgroundColor: i % 2 === 0 ? '#F8F9F9' : '' }}>\r\n                                                <TableCell>{i + 1}</TableCell>\r\n                                                <TableCell>{row.Mb_fname} {row.Mb_lname}</TableCell>\r\n                                                <TableCell>{row.Mb_email}</TableCell>\r\n                                                <TableCell>{row.Mb_tel}</TableCell>\r\n                                                <TableCell>{row.Mb_address}</TableCell>\r\n                                                <TableCell>{row.Mb_date}</TableCell>\r\n                                                <TableCell>\r\n                                                    <Grid\r\n                                                        container\r\n                                                        direction='row'\r\n                                                        justify='space-evenly'\r\n                                                        alignItems='center'>\r\n                                                        <Fab\r\n                                                            size='small'\r\n                                                            onClick={() => {\r\n                                                                this.setState({\r\n                                                                    Mb_id: row.Mb_id,\r\n                                                                    fname: row.Mb_fname,\r\n                                                                    lname: row.Mb_lname,\r\n                                                                    email: row.Mb_email,\r\n                                                                    tel: row.Mb_tel,\r\n                                                                    address: row.Mb_address,\r\n                                                                    Di_id: row.Di_id\r\n                                                                });\r\n                                                                this.getDividendList(row.Di_id);\r\n                                                            }}\r\n                                                            color='default'>\r\n                                                            <Edit />\r\n                                                        </Fab>\r\n                                                    </Grid>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport config from '../../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    Typography,\r\n    TextField,\r\n    Fab\r\n} from '@material-ui/core'\r\nimport {\r\n    Save\r\n} from '@material-ui/icons'\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class rice extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            storedToken: localStorage.getItem('token'),\r\n            type: localStorage.getItem('type'),\r\n            selfName: localStorage.getItem('username'),\r\n            currentDate: '',\r\n            result: [],\r\n            selected: {},\r\n            paddy: 0,\r\n            rice: 0,\r\n            sack: 0,\r\n            paymentNo: 0,\r\n            SUM: 0,\r\n            Mb_id: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, type } = this.state\r\n        if (storedToken !== null && type === 'staff') {\r\n            this.initPayslip()\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const { name, value } = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    initPayslip() {\r\n        this.getCurrentDate()\r\n        this.getMemberList()\r\n        this.getPayment()\r\n        this.getRicePrice()\r\n        this.getSelf()\r\n    }\r\n\r\n    onSelectMember(val) {\r\n        if (val) {\r\n            this.setState({ Mb_id: val.Mb_id })\r\n        } else {\r\n            this.setState({ Mb_id: null })\r\n        }\r\n    }\r\n\r\n    getCurrentDate() {\r\n        const options = { year: 'numeric', month: 'long', day: 'numeric' }\r\n        const today = new Date()\r\n        let date = today.toLocaleDateString('th-th', options)\r\n        this.setState({ currentDate: date })\r\n    }\r\n\r\n    getMemberList() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/member_list`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            this.setState({ result })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    getPayment() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/payment_id`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            let paymentNo = result[0]['MAX(Pm_id)'] + 1\r\n            this.setState({ paymentNo })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    getRicePrice() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/rice_price`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            let rice_price = result[0]['Pr_price']\r\n            this.setState({ rice_price })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    getSum(amount, rice_price) {\r\n        let SUM = new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(amount * rice_price)\r\n        return SUM\r\n    }\r\n\r\n    getSelf() {\r\n        const { selfName } = this.state\r\n        let data = { St_user: selfName }\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/self_St_id`, data)\r\n            .then(res => {\r\n                const result = res.data\r\n                let self_id = result[0]['St_id']\r\n                this.setState({ self_id })\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    onSavePayment(currentDate, Mb_id, self_id, sack, paddy, rice, rice_price) {\r\n        let data = {\r\n            Pm_date: currentDate,\r\n            Mb_id,\r\n            St_id: self_id,\r\n            Pm_payments: this.getSum(rice, rice_price)\r\n        }\r\n        let data2 = {\r\n            St_id: self_id,\r\n            Rc_kg: rice,\r\n            Rc_sack: paddy,\r\n            Rc_sum: this.getSum(rice, rice_price),\r\n            Rc_date: currentDate\r\n        }\r\n        if (currentDate && Mb_id && self_id && rice && paddy && sack) {\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/payment_save`, data)\r\n                .then(res => {\r\n                    const result = res.data\r\n                    if (result.result === 'success') {\r\n                        console.log('Save Success')\r\n                    } else {\r\n                        console.log('Save Failed')\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n            axios.post(`http://${config.host}:${config.port}/${config.path}/rice_save`, data2)\r\n                .then(res => {\r\n                    const result = res.data\r\n                    if (result.result === 'success') {\r\n                        console.log('Save Success')\r\n                    } else {\r\n                        console.log('Save Failed')\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                })\r\n            window.location.reload()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { currentDate, result, paddy, rice, sack, paymentNo, rice_price, Mb_id, self_id } = this.state\r\n        return (\r\n            < Fragment >\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.staff}\r\n                        type='staff'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Typography variant='h4'>{`${trans.bills}: ${paymentNo}`}</Typography>\r\n                        <Typography variant='h4' style={{ marginTop: 20 }}>{currentDate}</Typography>\r\n                        <Autocomplete\r\n                            options={result}\r\n                            getOptionLabel={val => `#${val.Mb_id} ${val.Mb_fname} ${val.Mb_lname}`}\r\n                            style={{ width: 620, marginTop: 20 }}\r\n                            onChange={(e, val) => {\r\n                                this.onSelectMember(val)\r\n                            }}\r\n                            renderInput={params => (\r\n                                <TextField {...params}\r\n                                    label={trans.member}\r\n                                    variant=\"outlined\"\r\n                                    style={{ width: 620 }} />\r\n                            )} />\r\n                        <Grid>\r\n                            <TextField\r\n                                label={trans.amount + trans.sack}\r\n                                style={{ marginTop: 20, width: 300 }}\r\n                                type='number'\r\n                                variant='outlined'\r\n                                name='sack'\r\n                                onChange={this.onChange}\r\n                                InputProps={{ inputProps: { min: 0 } }} />\r\n                            <TextField\r\n                                label={`${trans.kg} (${trans.paddy})`}\r\n                                style={{ marginLeft: 20, marginTop: 20, width: 300 }}\r\n                                type='number'\r\n                                variant='outlined'\r\n                                name='paddy'\r\n                                onChange={this.onChange}\r\n                                InputProps={{ inputProps: { min: 0 } }} />\r\n                            <TextField\r\n                                label={`${trans.kg} (${trans._rice})`}\r\n                                style={{ marginTop: 20, width: 300 }}\r\n                                type='number'\r\n                                variant='outlined'\r\n                                name='rice'\r\n                                onChange={this.onChange}\r\n                                InputProps={{ inputProps: { min: 0 } }} />\r\n                        </Grid>\r\n                        <Typography variant='h4' style={{ marginTop: 20 }}>{\r\n                            trans.rice_price} ({trans.kg}): {rice_price} {trans.baht}</Typography>\r\n                        <Typography variant='h4' style={{ marginTop: 20 }}>{\r\n                            trans.sum}:  {this.getSum(rice, rice_price)} {trans.baht}</Typography>\r\n                        <Fab\r\n                            style={{ marginTop: 20 }}\r\n                            size='small'\r\n                            onClick={() => {\r\n                                this.onSavePayment(currentDate, Mb_id, self_id, sack, rice, paddy, rice_price)\r\n                            }}\r\n                            color='default'>\r\n                            <Save />\r\n                        </Fab>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment >\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport config from '../../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class payment extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            storedToken: localStorage.getItem('token'),\r\n            type: localStorage.getItem('type'),\r\n            selfName: localStorage.getItem('username'),\r\n            result: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, type } = this.state\r\n        if (storedToken !== null && type === 'staff') {\r\n            this.getPayment()\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    getPayment() {\r\n        const { storedToken } = this.state\r\n        let resultStaff = [], resultAdmin = []\r\n        let result = []\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/getPaymentStaff`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            resultStaff = res.data\r\n\r\n            axios.get(`http://${config.host}:${config.port}/${config.path}/getPaymentAdmin`, {\r\n                headers: { 'x-access-token': storedToken }\r\n            }).then(res => {\r\n                resultAdmin = res.data\r\n\r\n                result = resultStaff.concat(resultAdmin)\r\n                this.setState({ result })\r\n            })\r\n        })\r\n    }\r\n\r\n    onSelectPayment(val) {\r\n        let data = [val]\r\n        if (val) {\r\n            this.setState({ result: data })\r\n        } else {\r\n            this.getPayment()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { result } = this.state\r\n        return (\r\n            <Fragment>\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.staff}\r\n                        type='staff'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Autocomplete\r\n                            options={result}\r\n                            getOptionLabel={val => `#${val.Pm_id} เมื่อวันที่ ${val.Pm_date}`}\r\n                            style={{ width: 620, marginTop: 20 }}\r\n                            onChange={(e, val) => {\r\n                                this.onSelectPayment(val)\r\n                            }}\r\n                            renderInput={params => (\r\n                                <TextField {...params}\r\n                                    label='ค้นหาเลขใบเสร็จ'\r\n                                    variant=\"outlined\"\r\n                                    style={{ width: 620 }} />\r\n                            )} />\r\n                        <Grid\r\n                            container\r\n                            direction='row'\r\n                            style={{ width: '100%' }}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>#</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.pay_date}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.member}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans._amount}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.operator}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {result.map((row, i, ) => (\r\n                                            <TableRow key={i} style={{ backgroundColor: i % 2 === 0 ? '#F8F9F9' : '' }}>\r\n                                                <TableCell>{row.Pm_id}</TableCell>\r\n                                                <TableCell>{row.Pm_date}</TableCell>\r\n                                                <TableCell>{row.Mb_fname} {row.Mb_lname}</TableCell>\r\n                                                <TableCell>{row.Pm_payments}</TableCell>\r\n                                                {row.St_id\r\n                                                    ? <TableCell>{row.St_fname} {row.St_lname}</TableCell>\r\n                                                    : <TableCell>{row.Ad_user}</TableCell>}\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport trans from '../../../lang/th-th.json'\r\nimport config from '../../../server/config.json'\r\nimport axios from 'axios'\r\nimport {\r\n    Grid,\r\n    TextField,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport Sidemenu from '../sidemenu/sidemenu'\r\n\r\nexport default class dividend extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            storedToken: localStorage.getItem('token'),\r\n            type: localStorage.getItem('type'),\r\n            selfName: localStorage.getItem('username'),\r\n            currentDate: '',\r\n            result: [],\r\n            selected: {},\r\n            paddy: 0,\r\n            rice: 0,\r\n            sack: 0,\r\n            paymentNo: 0,\r\n            SUM: 0,\r\n            Mb_id: null,\r\n            Di_id: null,\r\n            dividend: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validAuth()\r\n    }\r\n\r\n    validAuth() {\r\n        const { storedToken, type } = this.state\r\n        if (storedToken !== null && type === 'staff') {\r\n            this.initDividend()\r\n        } else {\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const { name, value } = e.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    initDividend() {\r\n        this.getMemberList()\r\n    }\r\n\r\n    onSelectMember(val) {\r\n        if (val) {\r\n            this.setState({\r\n                Mb_id: val.Mb_id,\r\n                Di_id: val.Di_id\r\n            })\r\n            this.getDividendList(val.Di_id)\r\n        } else {\r\n            this.setState({ Mb_id: null })\r\n        }\r\n    }\r\n\r\n    getMemberList() {\r\n        const { storedToken } = this.state\r\n        axios.get(`http://${config.host}:${config.port}/${config.path}/member_list`, {\r\n            headers: { 'x-access-token': storedToken }\r\n        }).then(res => {\r\n            const result = res.data\r\n            this.setState({ result })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    getDividendList(Di_id) {\r\n        const data = { Di_id }\r\n        axios.post(`http://${config.host}:${config.port}/${config.path}/dividend_list`, data).then(res => {\r\n            const result = res.data\r\n            this.dividendCal(result)\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    dividendCal(result) {\r\n        let val = result[0].Di_num\r\n        let data = []\r\n        let sum = 0\r\n        for (let i = 12; i > 0; i--) {\r\n            let value = val * 7 / 100 * i / 12\r\n            value = Number(value.toFixed(2))\r\n            sum += value\r\n            data.push({ month: i, value, num: val })\r\n        }\r\n        data[12] = { month: 0, value: '', num: Number(sum.toFixed(2)) }\r\n        this.setState({ dividend: data })\r\n    }\r\n\r\n    monthMatch(month) {\r\n        let months = ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']\r\n        return months[month - 1]\r\n    }\r\n\r\n    render() {\r\n        const { result, dividend } = this.state\r\n        return (\r\n            <Fragment>\r\n                <Grid\r\n                    container\r\n                    direction='row'>\r\n                    <Sidemenu\r\n                        name={trans.menu + trans.staff}\r\n                        type='staff'\r\n                        history={this.props.history} />\r\n                    <Grid\r\n                        xs={10}\r\n                        item\r\n                        container\r\n                        direction='column'\r\n                        style={{ padding: 30 }}>\r\n                        <Typography variant='h4' style={{ marginBottom: 20 }}>{trans.title}</Typography>\r\n                        <Autocomplete\r\n                            options={result}\r\n                            getOptionLabel={val => `#${val.Mb_id} ${val.Mb_fname} ${val.Mb_lname}`}\r\n                            style={{ width: 620, marginTop: 20 }}\r\n                            onChange={(e, val) => {\r\n                                this.onSelectMember(val)\r\n                            }}\r\n                            renderInput={params => (\r\n                                <TextField {...params}\r\n                                    label={trans.member}\r\n                                    variant=\"outlined\"\r\n                                    style={{ width: 620 }} />\r\n                            )} />\r\n\r\n                        <Grid\r\n                            container\r\n                            direction='row'\r\n                            style={{ width: '100%' }}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>#</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.year}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.amount}{trans.money}</TableCell>\r\n                                            <TableCell style={{ fontWeight: \"bold\" }}>{trans.money}{trans.total}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {dividend.map((row, i, ) => (\r\n                                            <TableRow key={i} style={{ backgroundColor: i % 2 === 0 ? '#F8F9F9' : '' }}>\r\n                                                {row.month === 0\r\n                                                    ?\r\n                                                    <Fragment>\r\n                                                        <TableCell colSpan={3} style={{ textAlign: 'center', fontWeight: 'bold' }}>รวม</TableCell>\r\n                                                        <TableCell>{row.num}</TableCell>\r\n                                                    </Fragment>\r\n                                                    :\r\n                                                    <Fragment>\r\n                                                        <TableCell>{i + 1}</TableCell>\r\n                                                        <TableCell>{this.monthMatch(row.month)}</TableCell>\r\n                                                        <TableCell>{row.num}</TableCell>\r\n                                                        <TableCell>{row.value}</TableCell>\r\n                                                    </Fragment>\r\n                                                }\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\nimport {\n    BrowserRouter as Router,\n    Route,\n} from 'react-router-dom'\nimport {\n    createMuiTheme,\n    MuiThemeProvider\n} from '@material-ui/core/styles'\n\nimport Login from './login/login'\n\n// ADMIN PORTAL\nimport Admin from './portal/admin/admin'\nimport adminMember from './portal/admin/member'\nimport adminStaff from './portal/admin/staff'\nimport adminRice from './portal/admin/rice'\nimport adminPayment from './portal/admin/payment'\nimport adminDividend from './portal/admin/dividend'\nimport adminRicePrice from './portal/admin/rice_price'\n\n\n// STAFF PORTAL\nimport Staff from './portal/staff/staff'\nimport staffMember from './portal/staff/member'\nimport staffRice from './portal/staff/rice'\nimport staffPayment from './portal/staff/payment'\nimport staffDividend from './portal/staff/dividend'\n\nconst theme = createMuiTheme({\n    typography: {\n        'fontFamily': 'Sarabun'\n    }\n})\n\nexport default class App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <Router basename='/rice'>\n                    <Route exact path='/' component={Login} />\n\n\n                    {/* PORTAL */}\n\n                    {/* ADMIN */}\n                    <Route path='/admin' component={Admin} />\n                    <Route path='/adminMember' component={adminMember} />\n                    <Route path='/adminStaff' component={adminStaff} />\n                    <Route path='/adminRice' component={adminRice} />\n                    <Route path='/adminPayment' component={adminPayment} />\n                    <Route path='/adminDividend' component={adminDividend} />\n                    <Route path='/adminRicePrice' component={adminRicePrice} />\n\n                    {/* STAFF */}\n                    <Route path='/staff' component={Staff} />\n                    <Route path='/staffMember' component={staffMember} />\n                    <Route path='/staffRice' component={staffRice} />\n                    <Route path='/staffPayment' component={staffPayment} />\n                    <Route path='/staffDividend' component={staffDividend} />\n\n                </Router>\n            </MuiThemeProvider>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './src/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}